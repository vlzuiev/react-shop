{"ast":null,"code":"import _objectSpread from \"/Users/vladyslavzuiev/Desktop/Udemy/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from './user.action';\nimport UserActionTypes from './user.types';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n  const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n  const userSnapshot = yield userRef.get();\n  yield put(signInSuccess(_objectSpread({\n    id: userSnapshot.id\n  }, userSnapshot.data())));\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n\nfunction* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (err) {\n    yield put(signOutFailure(err));\n  }\n}\n\nfunction* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    console.log(email, password, displayName);\n\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user; // yield createUserProfileDocument( user, {displayName});\n\n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    })); // yield getSnapshotFromUserAuth(user); \n  } catch (err) {\n    yield put(signUpFailure(err));\n  }\n}\n\nfunction* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}\nexport default userSagas;","map":{"version":3,"sources":["/Users/vladyslavzuiev/Desktop/Udemy/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","UserTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","UserActionTypes","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","signInWithGoogle","signInWithPopup","user","err","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","console","log","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from './user.action';\nimport UserActionTypes from './user.types';\n\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData){\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}));\n \n}\n\nfunction* signInWithGoogle() {\n    try {\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (err) {\n        yield put(signInFailure(err))\n    }\n}\n\nfunction* signInWithEmail({ payload: { email, password }}){\n    try{\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    }catch(err){\n        yield put(signInFailure(err))\n    }\n}\n\nfunction* isUserAuthenticated(){\n    try{\n        const userAuth = yield getCurrentUser(); \n        if(!userAuth) return; \n        yield getSnapshotFromUserAuth(userAuth);\n    }catch(err){\n        yield put(signInFailure(err));\n    }\n}\n\nfunction* signOut(){\n    try{\n        yield auth.signOut();\n        yield put(signOutSuccess());\n    }catch(err){\n        yield put(signOutFailure(err));\n    }\n}\n\nfunction* signUp({payload: {email, password, displayName}}){  \n    try{ \n        console.log(email, password, displayName);\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n\n        // yield createUserProfileDocument( user, {displayName});\n        yield put(signUpSuccess({user, additionalData: { displayName}}))\n        // yield getSnapshotFromUserAuth(user); \n    }\n    catch(err){\n        yield put(signUpFailure(err));\n    }\n}\n\nfunction* signInAfterSignUp({payload: {user, additionalData}}){\n    yield getSnapshotFromUserAuth(user, additionalData); \n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserTypes.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n    );\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(\n        UserTypes.EMAIL_SIGN_IN_START,\n        signInWithEmail\n    );\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(\n        UserTypes.CHECK_USER_SESSION,\n        isUserAuthenticated \n    )\n}\n\nexport function* onSignOutStart(){\n    yield takeLatest(\n        UserActionTypes.SIGN_OUT_START,\n        signOut\n    )\n} \n\nexport function* onSignUpStart(){\n    yield takeLatest(\n        UserActionTypes.SIGN_UP_START,\n        signUp\n    )\n}\n\nexport function* onSignUpSuccess(){\n    yield takeLatest(\n        UserActionTypes.SIGN_UP_SUCCESS,\n        signInAfterSignUp\n    )\n}\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)])\n}\n\n\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}