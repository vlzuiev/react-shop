{"ast":null,"code":"import _objectSpread from \"/Users/vladyslavzuiev/Desktop/Udemy/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure } from './user.action';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  const userRef = yield call(createUserProfileDocument, userAuth);\n  const userSnapshot = yield userRef.get();\n  yield put(SignInSuccess(_objectSpread({\n    id: userSnapshot.id\n  }, userSnapshot.data())));\n}\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    yield put(SignInFailure(err));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    yield put(SignInFailure(err));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log(\"USER AUTH\", userAuth);\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (err) {\n    yield put(SignInFailure(err));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/vladyslavzuiev/Desktop/Udemy/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","UserTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","signInWithGoogle","signInWithPopup","user","err","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","console","log","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,eAA7C;AAGA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,QAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B;AAEA,QAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,QAAMd,GAAG,CAACQ,aAAa;AAAGO,IAAAA,EAAE,EAAEF,YAAY,CAACE;AAApB,KAA2BF,YAAY,CAACG,IAAb,EAA3B,EAAd,CAAT;AAEH;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AAAA,iBACe,MAAMZ,IAAI,CAACa,eAAL,CAAqBd,cAArB,CADrB;AAAA,UACOe,IADP,QACOA,IADP;;AAEA,UAAMT,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACV,UAAMpB,GAAG,CAACS,aAAa,CAACW,GAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA0D;AAC7D,MAAG;AAAA,kBACkB,MAAMnB,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CADxB;AAAA,UACSL,IADT,SACSA,IADT;;AAEC,UAAMT,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGC,OAAMC,GAAN,EAAU;AACP,UAAMpB,GAAG,CAACS,aAAa,CAACW,GAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUM,mBAAV,GAA+B;AAClC,MAAG;AACC,UAAMf,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBjB,QAAzB;AACA,QAAG,CAACA,QAAJ,EAAc;AAEd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAND,CAMC,OAAMS,GAAN,EAAU;AACP,UAAMpB,GAAG,CAACS,aAAa,CAACW,GAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACnC,QAAM9B,UAAU,CACZI,SAAS,CAAC2B,oBADE,EAEZb,gBAFY,CAAhB;AAIH;AAED,OAAO,UAAUc,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CACZI,SAAS,CAAC6B,mBADE,EAEZX,eAFY,CAAhB;AAIH;AAED,OAAO,UAAUY,kBAAV,GAA+B;AAClC,QAAMlC,UAAU,CACZI,SAAS,CAAC+B,kBADE,EAEZR,mBAFY,CAAhB;AAIH;AAED,OAAO,UAAUS,SAAV,GAAsB;AACzB,QAAMlC,GAAG,CAAC,CAACC,IAAI,CAAC2B,mBAAD,CAAL,EAA4B3B,IAAI,CAAC6B,kBAAD,CAAhC,EAAsD7B,IAAI,CAAC+B,kBAAD,CAA1D,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure } from './user.action';\n\n\nexport function* getSnapshotFromUserAuth(userAuth){\n    const userRef = yield call(createUserProfileDocument, userAuth);\n\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}));\n \n}\n\nexport function* signInWithGoogle() {\n    try {\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (err) {\n        yield put(SignInFailure(err))\n    }\n}\n\nexport function* signInWithEmail({ payload: { email, password }}){\n    try{\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    }catch(err){\n        yield put(SignInFailure(err))\n    }\n}\n\nexport function* isUserAuthenticated(){\n    try{\n        const userAuth = yield getCurrentUser();\n        console.log(\"USER AUTH\", userAuth);\n        if(!userAuth) return;\n\n        yield getSnapshotFromUserAuth(userAuth);\n    }catch(err){\n        yield put(SignInFailure(err));\n    }\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserTypes.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n    );\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(\n        UserTypes.EMAIL_SIGN_IN_START,\n        signInWithEmail\n    );\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(\n        UserTypes.CHECK_USER_SESSION,\n        isUserAuthenticated \n    )\n}\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)])\n}\n"]},"metadata":{},"sourceType":"module"}