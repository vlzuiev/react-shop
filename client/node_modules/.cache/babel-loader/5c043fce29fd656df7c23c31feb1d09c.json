{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTION_START\n});\nexport const fetchCollecitonsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    console.log('after start');\n    collectionRef.get().then(snapshot => {\n      console.log('inside snapshot');\n      const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n      fetchCollecitonsSuccess(collectionMap);\n    }).catch(err => dispatch(fetchCollectionsFailure(err)));\n  };\n};","map":{"version":3,"sources":["/Users/vladyslavzuiev/Desktop/Udemy/crwn-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTION_START","fetchCollecitonsSuccess","collectionsMap","FETCH_COLLECTION_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTION_FAILURE","fetchCollectionStartAsync","dispatch","collectionRef","collection","console","log","get","then","snapshot","collectionMap","catch","err"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,wBADgC;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,wBAD8B;AAEpDH,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C;AAKP,OAAO,MAAME,yBAAyB,GAAG,MAAM;AAC3C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAH,IAAAA,aAAa,CAACI,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEA,YAAMI,aAAa,GAAGpB,+BAA+B,CAACmB,QAAD,CAArD;AACAf,MAAAA,uBAAuB,CAACgB,aAAD,CAAvB;AACH,KALD,EAKGC,KALH,CAKSC,GAAG,IAAIV,QAAQ,CAACJ,uBAAuB,CAACc,GAAD,CAAxB,CALxB;AAMH,GAVD;AAWH,CAZM","sourcesContent":["import ShopActionTypes from './shop.types'\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTION_START \n});\n\nexport const fetchCollecitonsSuccess = collectionsMap => ({\n    type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n    payload: collectionsMap\n});\n\nexport const fetchCollectionsFailure = errorMessage => ({\n    type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n    payload: errorMessage\n});\n\nexport const fetchCollectionStartAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collections');\n        dispatch(fetchCollectionsStart());\n        console.log('after start')\n        collectionRef.get().then(snapshot => {\n            console.log('inside snapshot')\n\n            const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n            fetchCollecitonsSuccess(collectionMap); \n        }).catch(err => dispatch(fetchCollectionsFailure(err)));\n    }\n}"]},"metadata":{},"sourceType":"module"}